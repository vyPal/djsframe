{"meta":{"generator":"0.11.0","format":20,"date":1642419025983},"custom":{"general":{"name":"General","files":{"welcome":{"name":"Welcome","type":"md","content":"# DJSFrame\r\nDJSFrame is a very simple and open-source framework to easily build your discord bot. DJSFrame was made to feel familiar to anyone who has used Discord.js's commando. Commando was an awesome framework, but sadly, with the releas of Discord.js v13 the framework was no longer going to be supported. Since commando was a great library, and I liked many things about it (speed, ease of use, ...) I decided to make DJSFrame, a simple framework for the Discord.js library, that would feel familiar, be easy to use, but also had all the great new features that they added in Discord.js v13","path":"README.md"},"first-steps":{"name":"First steps","type":"md","content":"# First steps\r\n> Here is a very simplified tutorial on getting started with the framework. If you want a more detailed version, check out the [Guide](https://vypal.gitbook.io/djsframe)\r\n\r\nSo just like with commando, first you will want to ensure, that instead of a regular Discord.js [Client](https://discord.js.org/#/docs/main/master/class/Client) you use the modified [CommandoClient](https://djsframe.js.org/#/docs/cmain/main/class/FrameClient). This is basically an extension of the default client, that adds all the functionality that the framework has to offer.\r\n\r\nWhen creating the moified client, be sure to add a owner array to the options. This should be an Array containing the user IDs of the owners as a string. It is required to enter this, so that you can control your bot.\r\n\r\n```javascript\r\nconst Frame = require('djsframe'); // Using Frame instead of DJSFrame, you can use the full name if you want to\r\n\r\nconst client = new Frame.Client({\r\n  owner: ['1234567890'] // Change this to your user's ID\r\n});\r\n```\r\n\r\nNext we want to initialize the command framework, this is what will be handeling your incoming commands, user's permission to run the command, and so on.\r\n\r\n```javascript\r\nconst path = require('path');\r\n\r\nclient.registry\r\n  // Registers the groups: 'Music commands' and 'Moderation commands' and sets their IDs to 'music' and 'moderation'\r\n  .registerGroups([\r\n    ['music', 'Music commands'],\r\n    ['moderation', 'Moderation commands']\r\n  ])\r\n\r\n  // Registers the default commands, groups, and argument types\r\n  .registerDefaults()\r\n\r\n  // Reads through all your command files in the 'commands' folder\r\n  .registerCommandsIn(path.join(__dirname, 'commands'))\r\n```\r\n\r\nJust like commando, DJSFrame also has a settings provider, that uses SQLite (More database types coming soon!) I would highly recomend, that you set one up, but it is not a necessary step. To do it, you will have to install 2 NPM packages, `sqlite`, and `sqlite3` (Both are required) `npm install --save sqlite sqlite3`. After you've done that, you can setup the database like this:\r\n```javascript\r\nconst sqlite = require('sqlite');\r\nconst sqlite3 = require('sqlite3');\r\n\r\nclient.setProvider(\r\n    sqlite.open({ filename: 'database.db', driver: sqlite3.Database }).then(db => new Frame.SQLiteProvider(db))\r\n).catch(console.error);\r\n```\r\n\r\nAnd yes, you are almost at the end, the last step is loging in to your bot. Do it just like you would in any other Discord.js bot:\r\n```javascript\r\nclient.login('paste your token here');\r\n```","path":"docs/general/first-steps.md"},"first-command":{"name":"First command","type":"md","content":"# First command\r\n> Here is a very simplified tutorial on creating your first command with the framework. If you want a more detailed version, check out the [Guide](https://vypal.gitbook.io/djsframe)\r\n\r\nSo, DJSFrame is primarily a command framework, which means that it has a lot of functions that make creating commands easier, and faster. Make shure that oyu have your bot setup, just like in the [First steps](https://djsframe.js.org/#/docs/main/main/general/first-steps) page.\r\n\r\nWe will start by creating a demo command. It will belong to the Utility group (which is registered by default), and will be owner-only (Noone can run the command, except the bot's owner). Create a folder, and name it `commands`, inside it, create another folder and name it `util`. Inside that folder, create a file, that we will name `demo.js`. Open the file up, and paste this code into it:\r\n```javascript\r\nconst { Command } = require('djsframe'); // Gets the Command class from DJSFrame\r\n\r\nmodule.exports = class DemoCommand extends Command { // Creates a new class and names it DemoCommand\r\n  constructor(client) {\r\n    super(client, {\r\n      name: 'demo', // Sets the name of the command to demo (must be lowercase, no spaces alowed)\r\n      aliases: ['d'], // Creates a shortcut for the command\r\n      group: 'util', // Sets the group of the command (must be equal to the group ID, NOT the name)\r\n      memberName: 'Demo', // Sets the name to use in the settings menu (can be any case, and supports spaces)\r\n      description: 'Just a demo command', // Sets a description of the command to use in the help command\r\n      ownerOnly: true // Sets the command to be available only to the owner/s of the bot\r\n    })\r\n  }\r\n\r\n  run(message, args) { // Sets up the function to run when the command is executed\r\n    message.reply('Yup, this command works now!'); // Replies to the message author\r\n  }\r\n}\r\n```\r\nAnd that is basically it. Save the code, restart your bot, and in any server with the bot in it, type your prefix (default is !) and the command `!demo`, or it's shortcut `!d`. Check the docs, or guide for more options, and functions!","path":"docs/general/first-command.md"}}},"commands":{"name":"Commands","files":{"builtins":{"name":"Built-in commands","type":"md","content":"# Built-in commands\r\nJust like in commando, DJSFrame has a couple commands built right in to the framework, so that you can get into the more important stuff\r\n\r\n## Utility (util)\r\n### help (util:help)\r\nIf the user does not specify any arguments, the command will give a list of all the commands that he can use (based on his permissions, enabled commands, ...). If he passes the `all` argument, all the bot's commands will be listed except for those, that have `hidden: true` in the command's info. If anything else is passed, DJSFrame will try to find a command or group, that matches the argument.","path":"docs/commands/builtins.md"}}}},"classes":[{"name":"FrameClient","description":"Discord.js modified Client with a built-in command framework","extends":[[["Client"]]],"construct":{"name":"FrameClient","params":[{"name":"options","description":"The options for the new client","type":[[["FrameClientOptions"]]]}]},"props":[{"name":"registry","description":"Registry to use for storing groups, command sand their data","type":[[["FrameRegistry"]]],"meta":{"line":33,"file":"client.js","path":"src"}},{"name":"dispatcher","description":"Dispatcher to use for handling commands","type":[[["FrameDispatcher"]]],"meta":{"line":39,"file":"client.js","path":"src"}},{"name":"provider","description":"The database provider to use for storing settings","type":[[["SQLiteProvider"]]],"meta":{"line":45,"file":"client.js","path":"src"}}],"methods":[{"name":"setRegistry","description":"Sets a new registry to use instead of default one","params":[{"name":"reg","description":"the new registry to set","type":[[["FrameRegistry"]]]}],"returns":{"types":[[["FrameClient"]]],"description":"client"},"meta":{"line":53,"file":"client.js","path":"src"}},{"name":"setDispatcher","description":"Sets a new dispatcher to use instead of default one","params":[{"name":"dsp","description":"the new dispatcher to set","type":[[["FrameDispatcher"]]]}],"returns":{"types":[[["FrameClient"]]],"description":"client"},"meta":{"line":71,"file":"client.js","path":"src"}},{"name":"setProvider","description":"Sets a new database provider to use for storing settings","params":[{"name":"provider","description":"The new provider to set","type":[[["SQLiteProvider"]]]}],"returns":{"types":[[["FrameClient"]]],"description":"client"},"meta":{"line":90,"file":"client.js","path":"src"}},{"name":"isOwner","description":"Function to check if a user is one of the owners of the bot","params":[{"name":"user","description":"The user to check if he is an owner of the bot","type":[[["User"]],[["Snowflake"]],[["Message"]],[["GuildMember"]]]}],"returns":{"types":[[["Boolean"]]],"description":"- True if the user is a owner of the bot"},"meta":{"line":109,"file":"client.js","path":"src"}}],"events":[{"name":"registryChange","description":"When the registry for the client is changed","params":[{"name":"client","description":"The client that the registry was changed for","type":[[["FrameClient"]]]},{"name":"registry","description":"The newly set registry","type":[[["FrameRegistry"]]]}],"meta":{"line":56,"file":"client.js","path":"src"}},{"name":"dispatcherChange","description":"When the dispatcher for the client is changed","params":[{"name":"client","description":"The client that the dispatcher was changed for","type":[[["FrameClient"]]]},{"name":"dispatcher","description":"The newly set dispatcher","type":[[["FrameDispatcher"]]]}],"meta":{"line":75,"file":"client.js","path":"src"}},{"name":"providerChange","description":"When the provider for the client is changed","params":[{"name":"client","description":"The client that the provider was changed for","type":[[["FrameClient"]]]},{"name":"provider","description":"The newly set provider","type":[[["SQLiteProvider"]]]}],"meta":{"line":93,"file":"client.js","path":"src"}},{"name":"groupRegister","description":"Emmited when a new group is registered","params":[{"name":"group","description":"The group that was registered","type":[[["FrameGroup"]]]},{"name":"registry","description":"The registry in which the group was registered","type":[[["FrameRegistry"]]]}],"meta":{"line":71,"file":"registry.js","path":"src"}},{"name":"commandRegister","description":"Emmited when a new command is registered","params":[{"name":"command","description":"The command that was registered","type":[[["FrameCommand"]]]},{"name":"registry","description":"The registry in which the command was registered","type":[[["FrameRegistry"]]]}],"meta":{"line":106,"file":"registry.js","path":"src"}},{"name":"setCommandDir","description":"Emmited when the command folder is changed","params":[{"name":"dir","description":"The folder to set as the command folder","type":[[["String"]]]},{"name":"registry","description":"The registry in which the command folder was changed","type":[[["FrameRegistry"]]]}],"meta":{"line":161,"file":"registry.js","path":"src"}},{"name":"typeRegister","description":"Emitted when an argument type is registered","params":[{"name":"type","description":"Argument type that was registered","type":[[["ArgumentType"]]]},{"name":"registry","description":"Registry that the type was registered to","type":[[["FrameRegistry"]]]}],"meta":{"line":191,"file":"registry.js","path":"src"}}],"meta":{"line":10,"file":"client.js","path":"src"}},{"name":"FrameDispatcher","description":"Class for handling and running commands","construct":{"name":"FrameDispatcher","description":"Creates a dispatcher","params":[{"name":"client","description":"The client for which the dispatcher is being created","type":[[["FrameClient"]]]},{"name":"registry","description":"The registry in which groups and commands are registered","type":[[["FrameRegistry"]]]}]},"methods":[{"name":"handleMessage","description":"Handles a incoming message","params":[{"name":"message","description":"The message to handle","type":[[["Message"]]]}],"returns":{"types":[[["boolean"]]],"description":"- False if not executed and true if executed"},"meta":{"line":20,"file":"dispatcher-old.js","path":"src"}},{"name":"handleSlash","description":"Handles a slash command","params":[{"name":"interaction","description":"The interaction to handle","type":[[["Interaction"]]]}],"meta":{"line":36,"file":"dispatcher-old.js","path":"src"}},{"name":"handleCommand","description":"Handles a command","params":[{"name":"message","description":"The message (or interaction) containing the command","type":[[["Message"]],[["Interaction"]]]},{"name":"starttype","description":"The type of the command start (1-prefix, 2-mention, 3-interaction)","optional":true,"default":1,"type":[[["Integer"]]]},{"name":"prefix","description":"The prefix used if starttype == 1","optional":true,"default":null,"type":[[["String"]]]}],"meta":{"line":48,"file":"dispatcher-old.js","path":"src"}}],"meta":{"line":4,"file":"dispatcher-old.js","path":"src"}},{"name":"CommandDispatcher","description":"Handles parsing messages and running commands from them","construct":{"name":"CommandDispatcher","params":[{"name":"client","description":"Client the dispatcher is for","type":[[["CommandoClient"]]]},{"name":"registry","description":"Registry the dispatcher will use","type":[[["CommandoRegistry"]]]}]},"props":[{"name":"client","description":"Client this dispatcher handles messages for","readonly":true,"type":[[["CommandoClient"]]],"meta":{"line":11,"file":"dispatcher.js","path":"src"}},{"name":"registry","description":"Registry this dispatcher uses","type":[[["CommandoRegistry"]]],"meta":{"line":23,"file":"dispatcher.js","path":"src"}},{"name":"inhibitors","description":"Functions that can block commands from running","type":[[["Set","<"],["function","()>"]]],"meta":{"line":29,"file":"dispatcher.js","path":"src"}},{"name":"_commandPatterns","description":"Map object of {@link RegExp}s that match command messages, mapped by string prefix","access":"private","type":[[["Object"]]],"meta":{"line":36,"file":"dispatcher.js","path":"src"}},{"name":"_results","description":"Old command message results, mapped by original message ID","access":"private","type":[[["Map","<"],["string",", "],["CommandoMessage",">"]]],"meta":{"line":43,"file":"dispatcher.js","path":"src"}},{"name":"_awaiting","description":"Tuples in string form of user ID and channel ID that are currently awaiting messages from a user in a channel","access":"private","type":[[["Set","<"],["string",">"]]],"meta":{"line":50,"file":"dispatcher.js","path":"src"}}],"methods":[{"name":"addInhibitor","description":"Adds an inhibitor","examples":["client.dispatcher.addInhibitor(msg => {\r  if(blacklistedUsers.has(msg.author.id)) return 'blacklisted';\r});","client.dispatcher.addInhibitor(msg => {\r\tif(!coolUsers.has(msg.author.id)) return { reason: 'cool', response: msg.reply('You\\'re not cool enough!') };\r});"],"params":[{"name":"inhibitor","description":"The inhibitor function to add","type":[[["Inhibitor"]]]}],"returns":{"types":[[["boolean"]]],"description":"Whether the addition was successful"},"meta":{"line":82,"file":"dispatcher.js","path":"src"}},{"name":"removeInhibitor","description":"Removes an inhibitor","params":[{"name":"inhibitor","description":"The inhibitor function to remove","type":[[["Inhibitor"]]]}],"returns":{"types":[[["boolean"]]],"description":"Whether the removal was successful"},"meta":{"line":94,"file":"dispatcher.js","path":"src"}},{"name":"handleMessage","description":"Handle a new message or a message update","access":"private","params":[{"name":"message","description":"The message to handle","type":[[["Message"]]]},{"name":"oldMessage","description":"The old message before the update","optional":true,"type":[[["Message"]]]}],"async":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":106,"file":"dispatcher.js","path":"src"}},{"name":"shouldHandleMessage","description":"Check whether a message should be handled","access":"private","params":[{"name":"message","description":"The message to handle","type":[[["Message"]]]},{"name":"oldMessage","description":"The old message before the update","optional":true,"type":[[["Message"]]]}],"returns":[[["boolean"]]],"meta":{"line":173,"file":"dispatcher.js","path":"src"}},{"name":"inhibit","description":"Inhibits a command message","access":"private","params":[{"name":"cmdMsg","description":"Command message to inhibit","type":[[["CommandoMessage"]]]}],"returns":{"types":[[["Inhibition"]]],"nullable":true},"meta":{"line":195,"file":"dispatcher.js","path":"src"}},{"name":"cacheCommandoMessage","description":"Caches a command message to be editable","access":"private","params":[{"name":"message","description":"Triggering message","type":[[["Message"]]]},{"name":"oldMessage","description":"Triggering message's old version","type":[[["Message"]]]},{"name":"cmdMsg","description":"Command message to cache","type":[[["CommandoMessage"]]]},{"name":"responses","description":"Responses to the message","type":[[["Message"]],[["Array","<"],["Message",">"]]]}],"meta":{"line":227,"file":"dispatcher.js","path":"src"}},{"name":"parseMessage","description":"Parses a message to find details about command usage in it","access":"private","params":[{"name":"message","description":"The message","type":[[["Message"]]]}],"returns":{"types":[[["CommandoMessage"]]],"nullable":true},"meta":{"line":246,"file":"dispatcher.js","path":"src"}},{"name":"matchDefault","description":"Matches a message against a guild command pattern","access":"private","params":[{"name":"message","description":"The message","type":[[["Message"]]]},{"name":"pattern","description":"The pattern to match against","type":[[["RegExp"]]]},{"name":"commandNameIndex","description":"The index of the command name in the pattern matches","default":1,"type":[[["number"]]]},{"name":"prefixless","description":"Whether the match is happening for a prefixless usage","default":false,"type":[[["boolean"]]]}],"returns":{"types":[[["CommandoMessage"]]],"nullable":true},"meta":{"line":273,"file":"dispatcher.js","path":"src"}},{"name":"buildCommandPattern","description":"Creates a regular expression to match the command prefix and name in a message","access":"private","params":[{"name":"prefix","description":"Prefix to build the pattern for","nullable":true,"type":[[["string"]]]}],"returns":[[["RegExp"]]],"meta":{"line":290,"file":"dispatcher.js","path":"src"}}],"meta":{"line":5,"file":"dispatcher.js","path":"src"}},{"name":"FrameRegistry","description":"Class for registering and searching for commands and groups","construct":{"name":"FrameRegistry","description":"Creates a registry","params":[{"name":"client","description":"The client to initialise the registery with","optional":true,"type":[[["FrameClient"]]]}]},"props":[{"name":"client","description":"The client that this registry will be for","readonly":true,"type":[[["FrameClient"]]],"meta":{"line":18,"file":"registry.js","path":"src"}},{"name":"commands","description":"All registered commands, mapped by their name","type":[[["Collection","<"],["string",", "],["FrameCommand",">"]]],"meta":{"line":30,"file":"registry.js","path":"src"}},{"name":"groups","description":"All registered groups, mapped by their ID","type":[[["Collection","<"],["string",", "],["CommandGroup",">"]]],"meta":{"line":36,"file":"registry.js","path":"src"}},{"name":"types","description":"All registered types, mapped by their ID","type":[[["Collection","<"],["string",", "],["ArgumentType",">"]]],"meta":{"line":42,"file":"registry.js","path":"src"}},{"name":"commandsPath","description":"Full path to bot's command folder","nullable":true,"type":[[["string"]]],"meta":{"line":48,"file":"registry.js","path":"src"}},{"name":"unknownCommand","description":"Command that will be run when an unkwnown command is used","nullable":true,"type":[[["FrameCommand"]]],"meta":{"line":54,"file":"registry.js","path":"src"}}],"methods":[{"name":"registerGroup","description":"Adds a new group to the registry","see":["{@link FrameRegistry#registerGroup}"],"params":[{"name":"id","description":"The ID of the group (must be lowercase)","type":[[["String"]]]},{"name":"name","description":"The name of the group","type":[[["String"]]]}],"returns":{"types":[[["FrameRegistry"]]],"description":"registry"},"meta":{"line":64,"file":"registry.js","path":"src"}},{"name":"registerGroups","description":"Adds multiple groups to the registry with one command","params":[{"name":"groups","description":"The groups to add to the registry","type":[[["Array"]]]}],"returns":{"types":[[["FrameRegistry"]]],"description":"registry"},"meta":{"line":87,"file":"registry.js","path":"src"}},{"name":"registerCommand","description":"Adds a single command to the registry","params":[{"name":"command","description":"The command to add to the registry","type":[[["FrameCommand"]]]}],"returns":{"types":[[["FrameRegistry"]]],"description":"registry"},"meta":{"line":101,"file":"registry.js","path":"src"}},{"name":"registerCommands","description":"Adds multiple commands to the registry with one command","params":[{"name":"commands","description":"The command to add to the registry","type":[[["Array"]]]}],"returns":{"types":[[["FrameRegistry"]]],"description":"registry"},"meta":{"line":121,"file":"registry.js","path":"src"}},{"name":"registerCommandsIn","description":"Registers all commands in a directory. The files must export a Command class constructor or instance.","examples":["const path = require('path');\rregistry.registerCommandsIn(path.join(__dirname, 'commands'));"],"params":[{"name":"options","description":"The path to the directory, or a require-all options object","type":[[["string"]],[["RequireAllOptions"]]]}],"returns":[[["FrameRegistry"]]],"meta":{"line":137,"file":"registry.js","path":"src"}},{"name":"setCommandDir","description":"Sets the folder in which all the command files are","params":[{"name":"dir","description":"The folder to set as the command folder","type":[[["String"]]]}],"returns":{"types":[[["FrameRegistry"]]],"description":"registry"},"meta":{"line":156,"file":"registry.js","path":"src"}},{"name":"registerType","description":"Registers a single argument type","see":["{@link FrameRegistry#registerTypes}"],"params":[{"name":"type","description":"Either an ArgumentType instance, or a constructor for one","type":[[["ArgumentType"]],[["function"]]]}],"returns":[[["FrameRegistry"]]],"meta":{"line":177,"file":"registry.js","path":"src"}},{"name":"registerTypes","description":"Registers multiple argument types","params":[{"name":"types","description":"An array of ArgumentType instances or constructors","type":[[["Array","<"],["ArgumentType",">"]],[["Array","<"],["function","()>"]]]},{"name":"ignoreInvalid","description":"Whether to skip over invalid objects without throwing an error","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["FrameRegistry"]]],"meta":{"line":209,"file":"registry.js","path":"src"}},{"name":"registerTypesIn","description":"Registers all argument types in a directory. The files must export an ArgumentType class constructor or instance.","params":[{"name":"options","description":"The path to the directory, or a require-all options object","type":[[["string"]],[["RequireAllOptions"]]]}],"returns":[[["FrameRegistry"]]],"meta":{"line":228,"file":"registry.js","path":"src"}},{"name":"registerDefaults","description":"Registers the default argument types, groups, and commands. This is equivalent to:\r```js\rregistry.registerDefaultTypes()\r\t.registerDefaultGroups()\r\t.registerDefaultCommands();\r```","returns":[[["FrameRegistry"]]],"meta":{"line":244,"file":"registry.js","path":"src"}},{"name":"registerDefaultGroups","description":"Registers the default groups (\"util\" and \"commands\")","returns":[[["FrameRegistry"]]],"meta":{"line":255,"file":"registry.js","path":"src"}},{"name":"registerDefaultCommands","description":"Registers the default commands to the registry","params":[{"name":"commands","description":"Object specifying which commands to register","optional":true,"type":[[["Object"]]]},{"name":"commands.help","description":"Whether to register the built-in help command\r(requires \"util\" group and \"string\" type)","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"commands.prefix","description":"Whether to register the built-in prefix command\r(requires \"util\" group and \"string\" type)","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"commands.eval","description":"Whether to register the built-in eval command\r(requires \"util\" group and \"string\" type)","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"commands.ping","description":"Whether to register the built-in ping command (requires \"util\" group)","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"commands.unknownCommand","description":"Whether to register the built-in unknown command\r(requires \"util\" group)","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"commands.commandState","description":"Whether to register the built-in command state commands\r(enable, disable, load, unload, reload, list groups - requires \"commands\" group, \"command\" type, and \"group\" type)","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[[["FrameRegistry"]]],"meta":{"line":278,"file":"registry.js","path":"src"}},{"name":"registerDefaultTypes","description":"Registers the default argument types to the registry","params":[{"name":"types","description":"Object specifying which types to register","optional":true,"type":[[["Object"]]]},{"name":"types.string","description":"Whether to register the built-in string type","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"types.integer","description":"Whether to register the built-in integer type","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"types.float","description":"Whether to register the built-in float type","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"types.boolean","description":"Whether to register the built-in boolean type","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"types.user","description":"Whether to register the built-in user type","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"types.member","description":"Whether to register the built-in member type","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"types.role","description":"Whether to register the built-in role type","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"types.channel","description":"Whether to register the built-in channel type","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"types.textChannel","description":"Whether to register the built-in text-channel type","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"types.voiceChannel","description":"Whether to register the built-in voice-channel type","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"types.categoryChannel","description":"Whether to register the built-in category-channel type","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"types.message","description":"Whether to register the built-in message type","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"types.customEmoji","description":"Whether to register the built-in custom-emoji type","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"types.defaultEmoji","description":"Whether to register the built-in default-emoji type","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"types.command","description":"Whether to register the built-in command type","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"types.group","description":"Whether to register the built-in group type","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[[["FrameRegistry"]]],"meta":{"line":329,"file":"registry.js","path":"src"}}],"meta":{"line":12,"file":"registry.js","path":"src"}},{"name":"Argument","description":"A fancy argument","construct":{"name":"Argument","params":[{"name":"client","description":"Client the argument is for","type":[[["CommandoClient"]]]},{"name":"info","description":"Information for the command argument","type":[[["ArgumentInfo"]]]}]},"props":[{"name":"key","description":"Key for the argument","type":[[["string"]]],"meta":{"line":46,"file":"argument.js","path":"src/commands"}},{"name":"label","description":"Label for the argument","type":[[["string"]]],"meta":{"line":52,"file":"argument.js","path":"src/commands"}},{"name":"prompt","description":"Question prompt for the argument","type":[[["string"]]],"meta":{"line":58,"file":"argument.js","path":"src/commands"}},{"name":"error","description":"Error message for when a value is invalid","nullable":true,"type":[[["string"]]],"meta":{"line":64,"file":"argument.js","path":"src/commands"}},{"name":"type","description":"Type of the argument","nullable":true,"type":[[["ArgumentType"]]],"meta":{"line":70,"file":"argument.js","path":"src/commands"}},{"name":"max","description":"If type is `integer` or `float`, this is the maximum value of the number.\rIf type is `string`, this is the maximum length of the string.","nullable":true,"type":[[["number"]]],"meta":{"line":77,"file":"argument.js","path":"src/commands"}},{"name":"min","description":"If type is `integer` or `float`, this is the minimum value of the number.\rIf type is `string`, this is the minimum length of the string.","nullable":true,"type":[[["number"]]],"meta":{"line":84,"file":"argument.js","path":"src/commands"}},{"name":"default","description":"The default value for the argument","nullable":true,"type":[[["ArgumentDefault"]]],"meta":{"line":90,"file":"argument.js","path":"src/commands"}},{"name":"oneOf","description":"Values the user can choose from\rIf type is `string`, this will be case-insensitive\rIf type is `channel`, `member`, `role`, or `user`, this will be the IDs.","nullable":true,"type":[[["Array","<"],["string",">"]]],"meta":{"line":98,"file":"argument.js","path":"src/commands"}},{"name":"infinite","description":"Whether the argument accepts an infinite number of values","type":[[["boolean"]]],"meta":{"line":106,"file":"argument.js","path":"src/commands"}},{"name":"validator","description":"Validator function for validating a value for the argument","see":["{@link ArgumentType#validate}"],"nullable":true,"type":[[["function"]]],"meta":{"line":113,"file":"argument.js","path":"src/commands"}},{"name":"parser","description":"Parser function for parsing a value for the argument","see":["{@link ArgumentType#parse}"],"nullable":true,"type":[[["function"]]],"meta":{"line":120,"file":"argument.js","path":"src/commands"}},{"name":"emptyChecker","description":"Function to check whether a raw value is considered empty","see":["{@link ArgumentType#isEmpty}"],"nullable":true,"type":[[["function"]]],"meta":{"line":127,"file":"argument.js","path":"src/commands"}},{"name":"wait","description":"How long to wait for input (in seconds)","type":[[["number"]]],"meta":{"line":133,"file":"argument.js","path":"src/commands"}}],"methods":[{"name":"obtain","description":"Prompts the user and obtains the value for the argument","params":[{"name":"msg","description":"Message that triggered the command","type":[[["FrameMessage"]]]},{"name":"val","description":"Pre-provided value for the argument","optional":true,"type":[[["string"]]]},{"name":"promptLimit","description":"Maximum number of times to prompt for the argument","optional":true,"default":"Infinity","type":[[["number"]]]}],"async":true,"returns":[[["Promise","<"],["ArgumentResult",">"]]],"meta":{"line":155,"file":"argument.js","path":"src/commands"}},{"name":"obtainInfinite","description":"Prompts the user and obtains multiple values for the argument","access":"private","params":[{"name":"msg","description":"Message that triggered the command","type":[[["Message"]]]},{"name":"vals","description":"Pre-provided values for the argument","optional":true,"type":[[["Array","<"],["string",">"]]]},{"name":"promptLimit","description":"Maximum number of times to prompt for the argument","optional":true,"default":"Infinity","type":[[["number"]]]}],"async":true,"returns":[[["Promise","<"],["ArgumentResult",">"]]],"meta":{"line":242,"file":"argument.js","path":"src/commands"}},{"name":"validate","description":"Checks if a value is valid for the argument","params":[{"name":"val","description":"Value to check","type":[[["string"]]]},{"name":"originalMsg","description":"Message that triggered the command","type":[[["Message"]]]},{"name":"currentMsg","description":"Current response message","optional":true,"default":"originalMsg","nullable":true,"type":[[["Message"]]]}],"returns":[[["boolean"]],[["string"]],[["Promise","<("],["boolean","|"],["string",")>"]]],"meta":{"line":355,"file":"argument.js","path":"src/commands"}},{"name":"parse","description":"Parses a value string into a proper value for the argument","params":[{"name":"val","description":"Value to parse","type":[[["string"]]]},{"name":"originalMsg","description":"Message that triggered the command","type":[[["Message"]]]},{"name":"currentMsg","description":"Current response message","optional":true,"default":"originalMsg","nullable":true,"type":[[["Message"]]]}],"returns":[["*"],[["Promise","<"],["*",">"]]],"meta":{"line":371,"file":"argument.js","path":"src/commands"}},{"name":"isEmpty","description":"Checks whether a value for the argument is considered to be empty","params":[{"name":"val","description":"Value to check for emptiness","type":[[["string"]]]},{"name":"originalMsg","description":"Message that triggered the command","type":[[["Message"]]]},{"name":"currentMsg","description":"Current response message","optional":true,"default":"originalMsg","nullable":true,"type":[[["Message"]]]}],"returns":[[["boolean"]]],"meta":{"line":383,"file":"argument.js","path":"src/commands"}},{"name":"validateInfo","description":"Validates the constructor parameters","scope":"static","access":"private","params":[{"name":"client","description":"Client to validate","type":[[["FrameClient"]]]},{"name":"info","description":"Info to validate","type":[[["ArgumentInfo"]]]}],"meta":{"line":396,"file":"argument.js","path":"src/commands"}},{"name":"determineType","description":"Gets the argument type to use from an ID","scope":"static","access":"private","params":[{"name":"client","description":"Client to use the registry of","type":[[["FrameClient"]]]},{"name":"id","description":"ID of the type to use","type":[[["string"]]]}],"returns":{"types":[[["ArgumentType"]]],"nullable":true},"meta":{"line":431,"file":"argument.js","path":"src/commands"}}],"meta":{"line":7,"file":"argument.js","path":"src/commands"}},{"name":"ArgumentCollector","description":"Obtains, validates, and prompts for argument values","construct":{"name":"ArgumentCollector","params":[{"name":"client","description":"Client the collector will use","type":[[["FrameClient"]]]},{"name":"args","description":"Arguments for the collector","type":[[["Array","<"],["ArgumentInfo",">"]]]},{"name":"promptLimit","description":"Maximum number of times to prompt for a single argument","optional":true,"default":"Infinity","type":[[["number"]]]}]},"props":[{"name":"client","description":"Client this collector is for","readonly":true,"type":[[["FrameClient"]]],"meta":{"line":15,"file":"collector.js","path":"src/commands"}},{"name":"args","description":"Arguments the collector handles","type":[[["Array","<"],["Argument",">"]]],"meta":{"line":27,"file":"collector.js","path":"src/commands"}},{"name":"promptLimit","description":"Maximum number of times to prompt for a single argument","type":[[["number"]]],"meta":{"line":43,"file":"collector.js","path":"src/commands"}}],"methods":[{"name":"obtain","description":"Obtains values for the arguments, prompting if necessary.","params":[{"name":"msg","description":"Message that the collector is being triggered by","type":[[["Message"]]]},{"name":"provided","description":"Values that are already available","optional":true,"default":"[]","type":[[["Array","<"],["*",">"]]]},{"name":"promptLimit","description":"Maximum number of times to prompt for a single argument","optional":true,"default":"this.promptLimit","type":[[["number"]]]}],"async":true,"returns":[[["Promise","<"],["ArgumentCollectorResult",">"]]],"meta":{"line":65,"file":"collector.js","path":"src/commands"}}],"meta":{"line":4,"file":"collector.js","path":"src/commands"}},{"name":"FrameCommand","description":"Class for creating a new command","construct":{"name":"FrameCommand","description":"Creates the command instance","params":[{"name":"client","description":"The client to bind the command to","type":[[["FrameClient"]]]},{"name":"info","description":"The info about the command","type":[[["CommandInfo"]]]}]},"props":[{"name":"client","description":"The client to be used for this command","readonly":true,"type":[[["FrameClient"]]],"meta":{"line":55,"file":"command.js","path":"src/commands"}},{"name":"info","description":"The command's information","readonly":true,"type":[[["CommandInfo"]]],"meta":{"line":63,"file":"command.js","path":"src/commands"}},{"name":"name","description":"The command name","readonly":true,"type":[[["String"]]],"meta":{"line":76,"file":"command.js","path":"src/commands"}},{"name":"aliases","description":"The command aliases","readonly":true,"type":[[["Array","<"],["String",">"]]],"meta":{"line":84,"file":"command.js","path":"src/commands"}},{"name":"group","description":"The command group","readonly":true,"type":[[["String"]]],"meta":{"line":91,"file":"command.js","path":"src/commands"}},{"name":"memberName","description":"The command memberName (the name that is shown for example in the help menu)","readonly":true,"type":[[["String"]]],"meta":{"line":98,"file":"command.js","path":"src/commands"}},{"name":"description","description":"The command description","readonly":true,"type":[[["String"]]],"meta":{"line":105,"file":"command.js","path":"src/commands"}},{"name":"details","description":"The command details (detailed description displayed in the help menu)","readonly":true,"type":[[["String"]]],"meta":{"line":113,"file":"command.js","path":"src/commands"}},{"name":"examples","description":"The command examples (examples of how to use the command)","readonly":true,"type":[[["Array","<"],["String",">"]]],"meta":{"line":121,"file":"command.js","path":"src/commands"}},{"name":"guildOnly","description":"Whether the command can only be run in a guild channel","type":[[["boolean"]]],"meta":{"line":127,"file":"command.js","path":"src/commands"}},{"name":"ownerOnly","description":"Whether the command can only be used by an owner","type":[[["boolean"]]],"meta":{"line":133,"file":"command.js","path":"src/commands"}},{"name":"clientPermissions","description":"Permissions required by the client to use the command.","nullable":true,"type":[[["Array","<"],["String",">"]]],"meta":{"line":139,"file":"command.js","path":"src/commands"}},{"name":"userPermissions","description":"Permissions required by the user to use the command.","nullable":true,"type":[[["Array","<"],["String",">"]]],"meta":{"line":145,"file":"command.js","path":"src/commands"}},{"name":"nsfw","description":"Whether the command can only be used in NSFW channels","type":[[["boolean"]]],"meta":{"line":151,"file":"command.js","path":"src/commands"}},{"name":"defaultHandling","description":"Whether the default command handling is enabled for the command","type":[[["boolean"]]],"meta":{"line":157,"file":"command.js","path":"src/commands"}},{"name":"throttling","description":"Options for throttling command usages","nullable":true,"type":[[["ThrottlingOptions"]]],"meta":{"line":163,"file":"command.js","path":"src/commands"}},{"name":"argsCollector","description":"The argument collector for the command","nullable":true,"type":[[["ArgumentCollector"]]],"meta":{"line":169,"file":"command.js","path":"src/commands"}},{"name":"argsType","description":"How the arguments are split when passed to the command's run method","type":[[["string"]]],"meta":{"line":184,"file":"command.js","path":"src/commands"}},{"name":"argsCount","description":"Maximum number of arguments that will be split","type":[[["number"]]],"meta":{"line":190,"file":"command.js","path":"src/commands"}},{"name":"argsSingleQuotes","description":"Whether single quotes are allowed to encapsulate an argument","type":[[["boolean"]]],"meta":{"line":196,"file":"command.js","path":"src/commands"}},{"name":"patterns","description":"Regular expression triggers","type":[[["Array","<"],["RegExp",">"]]],"meta":{"line":202,"file":"command.js","path":"src/commands"}},{"name":"guarded","description":"Whether the command is protected from being disabled","type":[[["boolean"]]],"meta":{"line":208,"file":"command.js","path":"src/commands"}},{"name":"hidden","description":"Whether the command should be hidden from the help command","type":[[["boolean"]]],"meta":{"line":214,"file":"command.js","path":"src/commands"}},{"name":"unknown","description":"Whether the command will be run when an unknown command is used","type":[[["boolean"]]],"meta":{"line":220,"file":"command.js","path":"src/commands"}},{"name":"_globalEnabled","description":"Whether the command is enabled globally","access":"private","type":[[["boolean"]]],"meta":{"line":227,"file":"command.js","path":"src/commands"}},{"name":"_throttles","description":"Current throttle objects for the command, mapped by user ID","access":"private","type":[[["Map","<"],["string",", "],["Object",">"]]],"meta":{"line":234,"file":"command.js","path":"src/commands"}}],"methods":[{"name":"hasPermission","description":"Checks whether the user has permission to use the command","params":[{"name":"message","description":"The triggering command message","type":[[["Message"]]]},{"name":"ownerOverride","description":"Whether the bot owner(s) will always have permission","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":{"types":[[["boolean"]],[["string"]]],"description":"Whether the user has permission, or an error message to respond with if they don't"},"meta":{"line":243,"file":"command.js","path":"src/commands"}},{"name":"onBlock","description":"Called when the command is prevented from running","params":[{"name":"message","description":"Command message that the command is running from","type":[[["Message"]]]},{"name":"reason","description":"Reason that the command was blocked\r(built-in reasons are `guildOnly`, `nsfw`, `permission`, `throttling`, and `clientPermissions`)","type":[[["string"]]]},{"name":"data","description":"Additional data associated with the block. Built-in reason data properties:\r- guildOnly: none\r- nsfw: none\r- permission: `response` ({@link string}) to send\r- throttling: `throttle` ({@link Object}), `remaining` ({@link number}) time in seconds\r- clientPermissions: `missing` ({@link Array}<{@link string}>) permission names","optional":true,"type":[[["Object"]]]}],"returns":[[["Promise","<(?"],["Message","|?"],["Array","<"],["Message",">)>"]]],"meta":{"line":280,"file":"command.js","path":"src/commands"}},{"name":"onError","description":"Called when the command produces an error while running","params":[{"name":"err","description":"Error that was thrown","type":[[["Error"]]]},{"name":"message","description":"Command message that the command is running from (see {@link Command#run})","type":[[["Message"]]]},{"name":"args","description":"Arguments for the command (see {@link Command#run})","type":[[["Object"]],[["string"]],[["Array","<"],["string",">"]]]},{"name":"fromPattern","description":"Whether the args are pattern matches (see {@link Command#run})","type":[[["boolean"]]]},{"name":"result","description":"Result from obtaining the arguments from the collector\r(if applicable - see {@link Command#run})","nullable":true,"type":[[["ArgumentCollectorResult"]]]}],"returns":[[["Promise","<(?"],["Message","|?"],["Array","<"],["Message",">)>"]]],"meta":{"line":321,"file":"command.js","path":"src/commands"}},{"name":"throttle","description":"Creates/obtains the throttle object for a user, if necessary (owners are excluded)","access":"protected","params":[{"name":"userID","description":"ID of the user to throttle for","type":[[["string"]]]}],"returns":{"types":[[["Object"]]],"nullable":true},"meta":{"line":342,"file":"command.js","path":"src/commands"}},{"name":"setEnabledIn","description":"Enables or disables the command in a guild","params":[{"name":"guild","description":"Guild to enable/disable the command in","nullable":true,"type":[[["GuildResolvable"]]]},{"name":"enabled","description":"Whether the command should be enabled or disabled","type":[[["boolean"]]]}],"meta":{"line":365,"file":"command.js","path":"src/commands"}},{"name":"isEnabledIn","description":"Checks if the command is enabled in a guild","params":[{"name":"guild","description":"Guild to check in","nullable":true,"type":[[["GuildResolvable"]]]},{"name":"bypassGroup","description":"Whether to bypass checking the group's status","optional":true,"type":[[["boolean"]]]}],"returns":[[["boolean"]]],"meta":{"line":384,"file":"command.js","path":"src/commands"}},{"name":"isUsable","description":"Checks if the command is usable for a message","params":[{"name":"message","description":"The message","default":null,"nullable":true,"type":[[["Message"]]]}],"returns":[[["boolean"]]],"meta":{"line":396,"file":"command.js","path":"src/commands"}},{"name":"usage","description":"Creates a usage string for the command","params":[{"name":"argString","description":"A string of arguments for the command","optional":true,"type":[[["string"]]]},{"name":"prefix","description":"Prefix to use for the prefixed command format","optional":true,"default":"this.client.commandPrefix","type":[[["string"]]]},{"name":"user","description":"User to use for the mention command format","optional":true,"default":"this.client.user","type":[[["User"]]]}],"returns":[[["string"]]],"meta":{"line":410,"file":"command.js","path":"src/commands"}},{"name":"reload","description":"Reloads the command","meta":{"line":417,"file":"command.js","path":"src/commands"}},{"name":"unload","description":"Unloads the command","meta":{"line":443,"file":"command.js","path":"src/commands"}},{"name":"validateInfo","description":"Validates the provided client and info to check for any errors","params":[{"name":"client","description":"The client that the command was created with","type":[[["FrameClient"]]]},{"name":"info","description":"The info to validate","type":[[["CommandInfo"]]]}],"meta":{"line":479,"file":"command.js","path":"src/commands"}},{"name":"run","description":"Runs the command","abstract":true,"params":[{"name":"message","description":"The message object which was received from discord","type":[[["Message"]]]},{"name":"args","description":"The command's arguments","type":[[["Object"]]]}],"async":true,"meta":{"line":545,"file":"command.js","path":"src/commands"}},{"name":"runSlash","description":"Runs a command from a slash command","abstract":true,"params":[{"name":"interaction","description":"The interaction that was received from discord","type":[[["Interaction"]]]},{"name":"args","description":"The command's arguments","type":[[["Object"]]]}],"async":true,"meta":{"line":555,"file":"command.js","path":"src/commands"}},{"name":"button","description":"Runs when a button is clicked","abstract":true,"params":[{"name":"interaction","description":"The button interaction received from discord","type":[[["Interaction"]]]}],"async":true,"meta":{"line":564,"file":"command.js","path":"src/commands"}},{"name":"usage","description":"Creates a usage string for a command","scope":"static","params":[{"name":"command","description":"A command + arg string","type":[[["string"]]]},{"name":"prefix","description":"Prefix to use for the prefixed command format","optional":true,"default":null,"type":[[["string"]]]},{"name":"user","description":"User to use for the mention command format","optional":true,"default":null,"type":[[["User"]]]}],"returns":[[["string"]]],"meta":{"line":457,"file":"command.js","path":"src/commands"}}],"meta":{"line":10,"file":"command.js","path":"src/commands"}},{"name":"FrameGroup","description":"Class for storing info about a group as an object","construct":{"name":"FrameGroup","description":"Creates a new group","params":[{"name":"client","description":"The client to be used for this group","type":[[["FrameClient"]]]},{"name":"id","description":"The id of the group (must be lowercase)","type":[[["String"]]]},{"name":"name","description":"The name of the group","type":[[["String"]]]}]},"props":[{"name":"id","description":"The id of the group","readonly":true,"type":[[["String"]]],"meta":{"line":28,"file":"group.js","path":"src/commands"}},{"name":"name","description":"The name of the group","readonly":true,"type":[[["String"]]],"meta":{"line":35,"file":"group.js","path":"src/commands"}}],"meta":{"line":4,"file":"group.js","path":"src/commands"}},{"name":"SQLiteProvider","description":"Sets up a SQLite database to sotre guild settings","construct":{"name":"SQLiteProvider","params":[{"name":"db","description":"The SQLite database to use for storing settings","type":[[["SQLiteDatabase"]]]}]},"props":[{"name":"db","description":"The database to be used for storing settings","type":[[["SQLiteDatabase"]]],"meta":{"line":24,"file":"sqlite.js","path":"src/providers"}},{"name":"client","description":"The client that the provider is for (set automaticallyafter using {@link FrameClient#setProvider})","readonly":true,"type":[[["FrameClient"]]],"meta":{"line":26,"file":"sqlite.js","path":"src/providers"}},{"name":"settings","description":"Guild and global settings, cached for faster loading","access":"private","type":[[["Map"]]],"meta":{"line":39,"file":"sqlite.js","path":"src/providers"}},{"name":"insertOrReplaceStmt","description":"Prepared statement to insert or replace a settings row","access":"private","type":[[["SQLiteStatement"]]],"meta":{"line":46,"file":"sqlite.js","path":"src/providers"}},{"name":"deleteStmt","description":"Prepared statement to delete an entire settings row","access":"private","type":[[["SQLiteStatement"]]],"meta":{"line":53,"file":"sqlite.js","path":"src/providers"}}],"methods":[{"name":"init","description":"Initialises and prepares the database","params":[{"name":"client","description":"The client to use for the provider","type":[[["FrameClient"]]]}],"async":true,"meta":{"line":60,"file":"sqlite.js","path":"src/providers"}},{"name":"destroy","description":"Finishes up all current operations with the database and closes the connection","async":true,"meta":{"line":87,"file":"sqlite.js","path":"src/providers"}},{"name":"get","description":"Gets a guild's or global setting from cached memory","params":[{"name":"guild","description":"The guild to get the settings for (or 'global')","type":[["*"]]},{"name":"key","description":"The key to the setting","type":[[["String"]]]},{"name":"defVal","description":"The default value to return if nothing is found","type":[["*"]]}],"returns":{"types":[["*"]],"description":"- The value of the setting"},"meta":{"line":101,"file":"sqlite.js","path":"src/providers"}},{"name":"set","description":"Sets or changes a setting of a guild or global","params":[{"name":"guild","description":"The guild to set the settings for (or 'global')","type":[["*"]]},{"name":"key","description":"The key to the setting","type":[[["String"]]]},{"name":"val","description":"The value to set","type":[["*"]]}],"async":true,"returns":{"types":[["*"]],"description":"- The value of the setting after changing"},"meta":{"line":113,"file":"sqlite.js","path":"src/providers"}},{"name":"remove","description":"Completely removes a setting from cache and database","params":[{"name":"guild","description":"The guild to delete the setting from","type":[["*"]]},{"name":"key","description":"The key to the setting","type":[[["String"]]]}],"async":true,"returns":{"types":[["*"]],"description":"- The value of the setting before it was deleted"},"meta":{"line":133,"file":"sqlite.js","path":"src/providers"}},{"name":"clear","description":"Clears all the setting for a guild","params":[{"name":"guild","description":"The guild to delete all data from","type":[["*"]]}],"async":true,"meta":{"line":149,"file":"sqlite.js","path":"src/providers"}},{"name":"updateOtherShards","description":"Changes a global setting on all shards","params":[{"name":"key","description":"The key to the setting","type":[["*"]]},{"name":"val","description":"The value to set","type":[["*"]]}],"meta":{"line":161,"file":"sqlite.js","path":"src/providers"}},{"name":"getGuildID","description":"Gets the ID of a guild","scope":"static","params":[{"name":"guild","description":"The guild to get the ID of","type":[[["String"]],[["Guild"]]]}],"returns":{"types":[[["String"]]],"description":"- The ID of the guild"},"meta":{"line":184,"file":"sqlite.js","path":"src/providers"}}],"meta":{"line":14,"file":"sqlite.js","path":"src/providers"}},{"name":"ArgumentType","description":"A type for command arguments","construct":{"name":"ArgumentType","params":[{"name":"client","description":"The client the argument type is for","type":[[["CommandoClient"]]]},{"name":"id","description":"The argument type ID (this is what you specify in {@link ArgumentInfo#type})","type":[[["string"]]]}]},"props":[{"name":"client","description":"Client that this argument type is for","readonly":true,"type":[[["CommandoClient"]]],"meta":{"line":12,"file":"base.js","path":"src/types"}},{"name":"id","description":"ID of this argument type (this is what you specify in {@link ArgumentInfo#type})","type":[[["string"]]],"meta":{"line":24,"file":"base.js","path":"src/types"}}],"methods":[{"name":"validate","description":"Validates a value string against the type","abstract":true,"params":[{"name":"val","description":"Value to validate","type":[[["string"]]]},{"name":"originalMsg","description":"Message that triggered the command","type":[[["CommandoMessage"]]]},{"name":"arg","description":"Argument the value was obtained from","type":[[["Argument"]]]},{"name":"currentMsg","description":"Current response message","optional":true,"default":"originalMsg","nullable":true,"type":[[["CommandoMessage"]]]}],"returns":{"types":[[["boolean"]],[["string"]],[["Promise","<("],["boolean","|"],["string",")>"]]],"description":"Whether the value is valid, or an error message"},"meta":{"line":37,"file":"base.js","path":"src/types"}},{"name":"parse","description":"Parses the raw value string into a usable value","abstract":true,"params":[{"name":"val","description":"Value to parse","type":[[["string"]]]},{"name":"originalMsg","description":"Message that triggered the command","type":[[["CommandoMessage"]]]},{"name":"arg","description":"Argument the value was obtained from","type":[[["Argument"]]]},{"name":"currentMsg","description":"Current response message","optional":true,"default":"originalMsg","nullable":true,"type":[[["CommandoMessage"]]]}],"returns":{"types":[["*"],[["Promise","<"],["*",">"]]],"description":"Usable value"},"meta":{"line":51,"file":"base.js","path":"src/types"}},{"name":"isEmpty","description":"Checks whether a value is considered to be empty. This determines whether the default value for an argument\nshould be used and changes the response to the user under certain circumstances.","params":[{"name":"val","description":"Value to check for emptiness","type":[[["string"]]]},{"name":"originalMsg","description":"Message that triggered the command","type":[[["CommandoMessage"]]]},{"name":"arg","description":"Argument the value was obtained from","type":[[["Argument"]]]},{"name":"currentMsg","description":"Current response message","optional":true,"default":"originalMsg","nullable":true,"type":[[["CommandoMessage"]]]}],"returns":{"types":[[["boolean"]]],"description":"Whether the value is empty"},"meta":{"line":64,"file":"base.js","path":"src/types"}}],"meta":{"line":2,"file":"base.js","path":"src/types"}},{"name":"ArgumentUnionType","description":"A type for command arguments that handles multiple other types","extends":[[["ArgumentType"]]],"props":[{"name":"types","description":"Types to handle, in order of priority","type":[[["Array","<"],["ArgumentType",">"]]],"meta":{"line":15,"file":"union.js","path":"src/types"}},{"name":"client","description":"Client that this argument type is for","readonly":true,"type":[[["CommandoClient"]]],"meta":{"line":12,"file":"base.js","path":"src/types"}},{"name":"id","description":"ID of this argument type (this is what you specify in {@link ArgumentInfo#type})","type":[[["string"]]],"meta":{"line":24,"file":"base.js","path":"src/types"}}],"methods":[{"name":"validate","description":"Validates a value string against the type","inherits":"ArgumentType#validate","inherited":true,"abstract":false,"params":[{"name":"val","description":"Value to validate","type":[[["string"]]]},{"name":"originalMsg","description":"Message that triggered the command","type":[[["CommandoMessage"]]]},{"name":"arg","description":"Argument the value was obtained from","type":[[["Argument"]]]},{"name":"currentMsg","description":"Current response message","optional":true,"default":"originalMsg","nullable":true,"type":[[["CommandoMessage"]]]}],"returns":{"types":[[["boolean"]],[["string"]],[["Promise","<("],["boolean","|"],["string",")>"]]],"description":"Whether the value is valid, or an error message"},"meta":{"line":37,"file":"base.js","path":"src/types"}},{"name":"parse","description":"Parses the raw value string into a usable value","inherits":"ArgumentType#parse","inherited":true,"abstract":false,"params":[{"name":"val","description":"Value to parse","type":[[["string"]]]},{"name":"originalMsg","description":"Message that triggered the command","type":[[["CommandoMessage"]]]},{"name":"arg","description":"Argument the value was obtained from","type":[[["Argument"]]]},{"name":"currentMsg","description":"Current response message","optional":true,"default":"originalMsg","nullable":true,"type":[[["CommandoMessage"]]]}],"returns":{"types":[["*"],[["Promise","<"],["*",">"]]],"description":"Usable value"},"meta":{"line":51,"file":"base.js","path":"src/types"}},{"name":"isEmpty","description":"Checks whether a value is considered to be empty. This determines whether the default value for an argument\nshould be used and changes the response to the user under certain circumstances.","inherits":"ArgumentType#isEmpty","inherited":true,"params":[{"name":"val","description":"Value to check for emptiness","type":[[["string"]]]},{"name":"originalMsg","description":"Message that triggered the command","type":[[["CommandoMessage"]]]},{"name":"arg","description":"Argument the value was obtained from","type":[[["Argument"]]]},{"name":"currentMsg","description":"Current response message","optional":true,"default":"originalMsg","nullable":true,"type":[[["CommandoMessage"]]]}],"returns":{"types":[[["boolean"]]],"description":"Whether the value is empty"},"meta":{"line":64,"file":"base.js","path":"src/types"}}],"meta":{"line":7,"file":"union.js","path":"src/types"}}],"interfaces":[],"typedefs":[{"name":"FrameClientOptions","description":"Options for the new FrameClient","type":[[["Object"]]],"props":[{"name":"commandPrefix","description":"Default prefix for the commands","optional":true,"default":"!","type":[[["string"]]]},{"name":"owners","description":"An array of the bot's owners","type":[[["Array","<"],["String",">"]]]}],"meta":{"line":11,"file":"client.js","path":"src"}},{"name":"Inhibition","type":[[["Object"]]],"props":[{"name":"reason","description":"Identifier for the reason the command is being blocked","type":[[["string"]]]},{"name":"response","description":"Response being sent to the user","nullable":true,"type":[[["Promise","<"],["Message",">"]]]}],"meta":{"line":53,"file":"dispatcher.js","path":"src"}},{"name":"Inhibitor","description":"A function that decides whether the usage of a command should be blocked","type":[[["function"]]],"params":[{"name":"msg","description":"Message triggering the command","type":[[["CommandoMessage"]]]}],"returns":{"types":[[["boolean"]],[["string"]],[["Inhibition"]]],"description":"`false` if the command should *not* be blocked.\rIf the command *should* be blocked, then one of the following:\r- A single string identifying the reason the command is blocked\r- An Inhibition object"},"meta":{"line":59,"file":"dispatcher.js","path":"src"}},{"name":"ArgumentInfo","type":[[["Object"]]],"props":[{"name":"key","description":"Key for the argument","type":[[["string"]]]},{"name":"label","description":"Label for the argument","optional":true,"default":"key","type":[[["string"]]]},{"name":"prompt","description":"First prompt for the argument when it wasn't specified","type":[[["string"]]]},{"name":"error","description":"Predefined error message to output for the argument when it isn't valid","optional":true,"type":[[["string"]]]},{"name":"type","description":"Type of the argument (must be the ID of one of the registered argument types\ror multiple IDs in order of priority separated by `|` for a union type - see\r{@link CommandoRegistry#registerDefaultTypes} for the built-in types)","optional":true,"type":[[["string"]]]},{"name":"max","description":"If type is `integer` or `float`, this is the maximum value of the number.\rIf type is `string`, this is the maximum length of the string.","optional":true,"type":[[["number"]]]},{"name":"min","description":"If type is `integer` or `float`, this is the minimum value of the number.\rIf type is `string`, this is the minimum length of the string.","optional":true,"type":[[["number"]]]},{"name":"default","description":"Default value for the argument (makes the arg optional - cannot be `null`)","optional":true,"type":[[["ArgumentDefault"]]]},{"name":"oneOf","description":"An array of values that are allowed to be used","optional":true,"type":[[["Array","<"],["string",">"]]]},{"name":"infinite","description":"Whether the argument accepts infinite values","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"validate","description":"Validator function for the argument (see {@link ArgumentType#validate})","optional":true,"type":[[["function"]]]},{"name":"parse","description":"Parser function for the argument (see {@link ArgumentType#parse})","optional":true,"type":[[["function"]]]},{"name":"isEmpty","description":"Empty checker for the argument (see {@link ArgumentType#isEmpty})","optional":true,"type":[[["function"]]]},{"name":"wait","description":"How long to wait for input (in seconds)","optional":true,"default":30,"type":[[["number"]]]}],"meta":{"line":8,"file":"argument.js","path":"src/commands"}},{"name":"ArgumentDefault","description":"Either a value or a function that returns a value. The function is passed the CommandoMessage and the Argument.","type":[["*"],[["function"]]],"meta":{"line":30,"file":"argument.js","path":"src/commands"}},{"name":"ArgumentResult","description":"Result object from obtaining a single {@link Argument}'s value(s)","type":[[["Object"]]],"props":[{"name":"value","description":"Final value(s) for the argument","type":[["*"],[["Array","<"],["*",">"]]]},{"name":"cancelled","description":"One of:\r- `user` (user cancelled)\r- `time` (wait time exceeded)\r- `promptLimit` (prompt limit exceeded)","nullable":true,"type":[[["string"]]]},{"name":"prompts","description":"All messages that were sent to prompt the user","type":[[["Array","<"],["Message",">"]]]},{"name":"answers","description":"All of the user's messages that answered a prompt","type":[[["Array","<"],["Message",">"]]]}],"meta":{"line":136,"file":"argument.js","path":"src/commands"}},{"name":"ArgumentCollectorResult","description":"Result object from obtaining argument values from an {@link ArgumentCollector}","type":[[["Object"]]],"props":[{"name":"values","description":"Final values for the arguments, mapped by their keys","nullable":true,"type":[[["Object"]]]},{"name":"cancelled","description":"One of:\r- `user` (user cancelled)\r- `time` (wait time exceeded)\r- `promptLimit` (prompt limit exceeded)","nullable":true,"type":[[["string"]]]},{"name":"prompts","description":"All messages that were sent to prompt the user","type":[[["Array","<"],["Message",">"]]]},{"name":"answers","description":"All of the user's messages that answered a prompt","type":[[["Array","<"],["Message",">"]]]}],"meta":{"line":46,"file":"collector.js","path":"src/commands"}},{"name":"CommandInfo","description":"The information about the command","type":[[["Object"]]],"props":[{"name":"name","description":"The name of the command (only lower-case)","type":[[["String"]]]},{"name":"aliases","description":"The aliases for the command","optional":true,"default":"[]","type":[[["Array","<"],["String",">"]]]},{"name":"autoAliases","description":"Whether automatic aliases should be added","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"group","description":"The group for the command","type":[[["String"]]]},{"name":"memberName","description":"The display name of the command (can include special characters)","type":[[["String"]]]},{"name":"description","description":"The description of the command","type":[[["String"]]]},{"name":"details","description":"A detailed description of the command","optional":true,"default":"\"\"","type":[[["String"]]]},{"name":"examples","description":"A list of examples for the command","optional":true,"default":"[]","type":[[["Array","<"],["String",">"]]]},{"name":"clientPermissions","description":"A list of permissions that the client has to have","optional":true,"default":"[]","type":[[["Array","<"],["String",">"]]]},{"name":"userPermissions","description":"A list of permissions that the user has to have","optional":true,"default":"[]","type":[[["Array","<"],["String",">"]]]},{"name":"ownerOnly","description":"Whether the command should be restricted to the bot owner","optional":true,"default":false,"type":[[["Boolean"]]]},{"name":"guildOnly","description":"Whether or not the command should only function in a guild channel","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"nsfw","description":"Whether the command is usable only in NSFW channels.","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"throttling","description":"Options for throttling usages of the command.","optional":true,"type":[[["ThrottlingOptions"]]]},{"name":"defaultHandling","description":"Whether or not the default command handling should be used.\rIf false, then only patterns will trigger the command.","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"args","description":"Arguments for the command.","optional":true,"type":[[["Array","<"],["ArgumentInfo",">"]]]},{"name":"argsCount","description":"The number of arguments to parse from the command string.\rOnly applicable when argsType is 'multiple'. If nonzero, it should be at least 2.\rWhen this is 0, the command argument string will be split into as many arguments as it can be.\rWhen nonzero, it will be split into a maximum of this number of arguments.","optional":true,"default":0,"type":[[["number"]]]},{"name":"argsType","description":"One of 'single' or 'multiple'. Only applicable if `args` is not specified.\rWhen 'single', the entire argument string will be passed to run as one argument.\rWhen 'multiple', it will be passed as multiple arguments.","optional":true,"default":"single","type":[[["string"]]]},{"name":"argsSingleQuotes","description":"Whether or not single quotes should be allowed to box-in arguments\rin the command string.","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"patterns","description":"Patterns to use for triggering the command","optional":true,"type":[[["Array","<"],["RegExp",">"]]]},{"name":"guarded","description":"Whether the command should be protected from disabling","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"hidden","description":"Whether the command should be hidden from the help command","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"unknown","description":"Whether the command should be run when an unknown command is used - there\rmay only be one command registered with this property as `true`.","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":11,"file":"command.js","path":"src/commands"}}],"externals":[{"name":"SQLiteStatement","see":["{@link https://www.npmjs.com/package/sqlite}"],"meta":{"line":1,"file":"sqlite.js","path":"src/providers"}},{"name":"SQLiteDatabase","see":["{@link https://www.npmjs.com/package/sqlite}"],"meta":{"line":6,"file":"sqlite.js","path":"src/providers"}}]}