{"meta":{"generator":"0.10.0","format":20,"date":1633626705738},"custom":{"general":{"name":"General","files":{"welcome":{"name":"Welcome","type":"md","content":"# DJSFrame\r\nDJSFrame is a very simple and open-source framework to easily build your discord bot. DJSFrame was made to feel familiar to anyone who has used Discord.js's commando. Commando was an awesome framework, but sadly, with the releas of Discord.js v13 the framework was no longer going to be supported. Since commando was a great library, and I liked many things about it (speed, ease of use, ...) I decided to make DJSFrame, a simple framework for the Discord.js library, that would feel familiar, be easy to use, but also had all the great new features that they added in Discord.js v13","path":"README.md"},"first-steps":{"name":"First steps","type":"md","content":"# First steps\r\n> Here is a very simplified tutorial on getting started with the framework. If you want a more detailed version, check out the [Guide](https://vypal.gitbook.io/djsframe)\r\n\r\nSo just like with commando, first you will want to ensure, that instead of a regular Discord.js [Client](https://discord.js.org/#/docs/main/master/class/Client) you use the modified [CommandoClient](https://djsframe.js.org/#/docs/cmain/main/class/FrameClient). This is basically an extension of the default client, that adds all the functionality that the framework has to offer.\r\n\r\nWhen creating the moified client, be sure to add a owner array to the options. This should be an Array containing the user IDs of the owners as a string. It is required to enter this, so that you can control your bot.\r\n\r\n```javascript\r\nconst Frame = require('djsframe'); // Using Frame instead of DJSFrame, you can use the full name if you want to\r\n\r\nconst client = new Frame.Client({\r\n  owner: ['1234567890'] // Change this to your user's ID\r\n});\r\n```\r\n\r\nNext we want to initialize the command framework, this is what will be handeling your incoming commands, user's permission to run the command, and so on.\r\n\r\n```javascript\r\nconst path = require('path');\r\n\r\nclient.registry\r\n  // Registers the groups: 'Music commands' and 'Moderation commands' and sets their IDs to 'music' and 'moderation'\r\n  .registerGroups([\r\n    ['music', 'Music commands'],\r\n    ['moderation', 'Moderation commands']\r\n  ])\r\n\r\n  // Registers the default commands, groups, and argument types\r\n  .registerDefaults()\r\n\r\n  // Reads through all your command files in the 'commands' folder\r\n  .registerCommandsIn(path.join(__dirname, 'commands'))\r\n```\r\n\r\nJust like commando, DJSFrame also has a settings provider, that uses SQLite (More database types coming soon!) I would highly recomend, that you set one up, but it is not a necessary step. To do it, you will have to install 2 NPM packages, `sqlite`, and `sqlite3` (Both are required) `npm install --save sqlite sqlite3`. After you've done that, you can setup the database like this:\r\n```javascript\r\nconst sqlite = require('sqlite');\r\nconst sqlite3 = require('sqlite3');\r\n\r\nclient.setProvider(\r\n    sqlite.open({ filename: 'database.db', driver: sqlite3.Database }).then(db => new Frame.SQLiteProvider(db))\r\n).catch(console.error);\r\n```\r\n\r\nAnd yes, you are almost at the end, the last step is loging in to your bot. Do it just like you would in any other Discord.js bot:\r\n```javascript\r\nclient.login('paste your token here');\r\n```","path":"docs/general/first-steps.md"}}},"commands":{"name":"Commands","files":{"builtins":{"name":"Built-in commands","type":"md","content":"# Built-in commands\r\nJust like in commando, DJSFrame has a couple commands built right in to the framework, so that you can get into the more important stuff\r\n\r\n## Utility (util)\r\n### help (util:help)\r\nIf the user does not specify any arguments, the command will give a list of all the commands that he can use (based on his permissions, enabled commands, ...). If he passes the `all` argument, all the bot's commands will be listed except for those, that have `hidden: true` in the command's info. If anything else is passed, DJSFrame will try to find a command or group, that matches the argument.","path":"docs/commands/builtins.md"}}}},"classes":[{"name":"FrameClient","description":"Discord.js modified Client with a built-in command framework","extends":[[["Client"]]],"construct":{"name":"FrameClient","params":[{"name":"options","description":"The options for the new client","type":[[["FrameClientOptions"]]]}]},"props":[{"name":"registry","description":"Registry to use for storing groups, command sand their data","type":[[["FrameRegistry"]]],"meta":{"line":32,"file":"client.js","path":"src"}},{"name":"dispatcher","description":"Dispatcher to use for handling commands","type":[[["FrameDispatcher"]]],"meta":{"line":38,"file":"client.js","path":"src"}},{"name":"provider","description":"The database provider to use for storing settings","type":[[["SQLiteProvider"]]],"meta":{"line":44,"file":"client.js","path":"src"}}],"methods":[{"name":"setRegistry","description":"Sets a new registry to use instead of default one","params":[{"name":"reg","description":"the new registry to set","type":[[["FrameRegistry"]]]}],"returns":{"types":[[["FrameClient"]]],"description":"client"},"meta":{"line":52,"file":"client.js","path":"src"}},{"name":"setDispatcher","description":"Sets a new dispatcher to use instead of default one","params":[{"name":"dsp","description":"the new dispatcher to set","type":[[["FrameDispatcher"]]]}],"returns":{"types":[[["FrameClient"]]],"description":"client"},"meta":{"line":70,"file":"client.js","path":"src"}},{"name":"setProvider","description":"Sets a new database provider to use for storing settings","params":[{"name":"provider","description":"The new provider to set","type":[[["SQLiteProvider"]]]}],"returns":{"types":[[["FrameClient"]]],"description":"client"},"meta":{"line":89,"file":"client.js","path":"src"}},{"name":"isOwner","description":"Function to check if a user is one of the owners of the bot","params":[{"name":"user","description":"The user to check if he is an owner of the bot","type":[[["User"]],[["Snowflake"]],[["Message"]],[["GuildMember"]]]}],"returns":{"types":[[["Boolean"]]],"description":"- True if the user is a owner of the bot"},"meta":{"line":108,"file":"client.js","path":"src"}}],"events":[{"name":"registryChange","description":"When the registry for the client is changed","params":[{"name":"client","description":"The client that the registry was changed for","type":[[["FrameClient"]]]},{"name":"registry","description":"The newly set registry","type":[[["FrameRegistry"]]]}],"meta":{"line":55,"file":"client.js","path":"src"}},{"name":"dispatcherChange","description":"When the dispatcher for the client is changed","params":[{"name":"client","description":"The client that the dispatcher was changed for","type":[[["FrameClient"]]]},{"name":"dispatcher","description":"The newly set dispatcher","type":[[["FrameDispatcher"]]]}],"meta":{"line":74,"file":"client.js","path":"src"}},{"name":"providerChange","description":"When the provider for the client is changed","params":[{"name":"client","description":"The client that the provider was changed for","type":[[["FrameClient"]]]},{"name":"provider","description":"The newly set provider","type":[[["SQLiteProvider"]]]}],"meta":{"line":92,"file":"client.js","path":"src"}},{"name":"groupRegister","description":"Emmited when a new group is registered","params":[{"name":"group","description":"The group that was registered","type":[[["FrameGroup"]]]},{"name":"registry","description":"The registry in which the group was registered","type":[[["FrameRegistry"]]]}],"meta":{"line":71,"file":"registry.js","path":"src"}},{"name":"commandRegister","description":"Emmited when a new command is registered","params":[{"name":"command","description":"The command that was registered","type":[[["FrameCommand"]]]},{"name":"registry","description":"The registry in which the command was registered","type":[[["FrameRegistry"]]]}],"meta":{"line":107,"file":"registry.js","path":"src"}},{"name":"setCommandDir","description":"Emmited when the command folder is changed","params":[{"name":"dir","description":"The folder to set as the command folder","type":[[["String"]]]},{"name":"registry","description":"The registry in which the command folder was changed","type":[[["FrameRegistry"]]]}],"meta":{"line":162,"file":"registry.js","path":"src"}},{"name":"typeRegister","description":"Emitted when an argument type is registered","params":[{"name":"type","description":"Argument type that was registered","type":[[["ArgumentType"]]]},{"name":"registry","description":"Registry that the type was registered to","type":[[["FrameRegistry"]]]}],"meta":{"line":192,"file":"registry.js","path":"src"}}],"meta":{"line":10,"file":"client.js","path":"src"}},{"name":"FrameDispatcher","description":"Class for handling and running commands","construct":{"name":"FrameDispatcher","description":"Creates a dispatcher","params":[{"name":"client","description":"The client for which the dispatcher is being created","type":[[["FrameClient"]]]},{"name":"registry","description":"The registry in which groups and commands are registered","type":[[["FrameRegistry"]]]}]},"methods":[{"name":"handleMessage","description":"Handles a incoming message","params":[{"name":"message","description":"The message to handle","type":[[["Message"]]]}],"returns":{"types":[[["boolean"]]],"description":"- False if not executed and true if executed"},"meta":{"line":20,"file":"dispatcher.js","path":"src"}},{"name":"handleSlash","description":"Handles a slash command","params":[{"name":"interaction","description":"The interaction to handle","type":[[["Interaction"]]]}],"meta":{"line":36,"file":"dispatcher.js","path":"src"}},{"name":"handleCommand","description":"Handles a command","params":[{"name":"message","description":"The message (or interaction) containing the command","type":[[["Message"]],[["Interaction"]]]},{"name":"starttype","description":"The type of the command start (1-prefix, 2-mention, 3-interaction)","optional":true,"default":1,"type":[[["Integer"]]]},{"name":"prefix","description":"The prefix used if starttype == 1","optional":true,"default":null,"type":[[["String"]]]}],"meta":{"line":48,"file":"dispatcher.js","path":"src"}}],"meta":{"line":4,"file":"dispatcher.js","path":"src"}},{"name":"FrameRegistry","description":"Class for registering and searching for commands and groups","construct":{"name":"FrameRegistry","description":"Creates a registry","params":[{"name":"client","description":"The client to initialise the registery with","optional":true,"type":[[["FrameClient"]]]}]},"props":[{"name":"client","description":"The client that this registry will be for","readonly":true,"type":[[["FrameClient"]]],"meta":{"line":18,"file":"registry.js","path":"src"}},{"name":"commands","description":"All registered commands, mapped by their name","type":[[["Collection","<"],["string",", "],["FrameCommand",">"]]],"meta":{"line":30,"file":"registry.js","path":"src"}},{"name":"groups","description":"All registered groups, mapped by their ID","type":[[["Collection","<"],["string",", "],["CommandGroup",">"]]],"meta":{"line":36,"file":"registry.js","path":"src"}},{"name":"types","description":"All registered types, mapped by their ID","type":[[["Collection","<"],["string",", "],["ArgumentType",">"]]],"meta":{"line":42,"file":"registry.js","path":"src"}},{"name":"commandsPath","description":"Full path to bot's command folder","nullable":true,"type":[[["string"]]],"meta":{"line":48,"file":"registry.js","path":"src"}},{"name":"unknownCommand","description":"Command that will be run when an unkwnown command is used","nullable":true,"type":[[["FrameCommand"]]],"meta":{"line":54,"file":"registry.js","path":"src"}}],"methods":[{"name":"registerGroup","description":"Adds a new group to the registry","see":["{@link FrameRegistry#registerGroup}"],"params":[{"name":"id","description":"The ID of the group (must be lowercase)","type":[[["String"]]]},{"name":"name","description":"The name of the group","type":[[["String"]]]}],"returns":{"types":[[["FrameRegistry"]]],"description":"registry"},"meta":{"line":64,"file":"registry.js","path":"src"}},{"name":"registerGroups","description":"Adds multiple groups to the registry with one command","params":[{"name":"groups","description":"The groups to add to the registry","type":[[["Array"]]]}],"returns":{"types":[[["FrameRegistry"]]],"description":"registry"},"meta":{"line":88,"file":"registry.js","path":"src"}},{"name":"registerCommand","description":"Adds a single command to the registry","params":[{"name":"command","description":"The command to add to the registry","type":[[["FrameCommand"]]]}],"returns":{"types":[[["FrameRegistry"]]],"description":"registry"},"meta":{"line":102,"file":"registry.js","path":"src"}},{"name":"registerCommands","description":"Adds multiple commands to the registry with one command","params":[{"name":"commands","description":"The command to add to the registry","type":[[["Array"]]]}],"returns":{"types":[[["FrameRegistry"]]],"description":"registry"},"meta":{"line":122,"file":"registry.js","path":"src"}},{"name":"registerCommandsIn","description":"Registers all commands in a directory. The files must export a Command class constructor or instance.","examples":["const path = require('path');\rregistry.registerCommandsIn(path.join(__dirname, 'commands'));"],"params":[{"name":"options","description":"The path to the directory, or a require-all options object","type":[[["string"]],[["RequireAllOptions"]]]}],"returns":[[["FrameRegistry"]]],"meta":{"line":138,"file":"registry.js","path":"src"}},{"name":"setCommandDir","description":"Sets the folder in which all the command files are","params":[{"name":"dir","description":"The folder to set as the command folder","type":[[["String"]]]}],"returns":{"types":[[["FrameRegistry"]]],"description":"registry"},"meta":{"line":157,"file":"registry.js","path":"src"}},{"name":"registerType","description":"Registers a single argument type","see":["{@link FrameRegistry#registerTypes}"],"params":[{"name":"type","description":"Either an ArgumentType instance, or a constructor for one","type":[[["ArgumentType"]],[["function"]]]}],"returns":[[["FrameRegistry"]]],"meta":{"line":178,"file":"registry.js","path":"src"}},{"name":"registerTypes","description":"Registers multiple argument types","params":[{"name":"types","description":"An array of ArgumentType instances or constructors","type":[[["Array","<"],["ArgumentType",">"]],[["Array","<"],["function","()>"]]]},{"name":"ignoreInvalid","description":"Whether to skip over invalid objects without throwing an error","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["FrameRegistry"]]],"meta":{"line":210,"file":"registry.js","path":"src"}},{"name":"registerTypesIn","description":"Registers all argument types in a directory. The files must export an ArgumentType class constructor or instance.","params":[{"name":"options","description":"The path to the directory, or a require-all options object","type":[[["string"]],[["RequireAllOptions"]]]}],"returns":[[["FrameRegistry"]]],"meta":{"line":229,"file":"registry.js","path":"src"}},{"name":"registerDefaults","description":"Registers the default argument types, groups, and commands. This is equivalent to:\r```js\rregistry.registerDefaultTypes()\r\t.registerDefaultGroups()\r\t.registerDefaultCommands();\r```","returns":[[["FrameRegistry"]]],"meta":{"line":245,"file":"registry.js","path":"src"}},{"name":"registerDefaultGroups","description":"Registers the default groups (\"util\" and \"commands\")","returns":[[["FrameRegistry"]]],"meta":{"line":256,"file":"registry.js","path":"src"}},{"name":"registerDefaultCommands","description":"Registers the default commands to the registry","params":[{"name":"commands","description":"Object specifying which commands to register","optional":true,"type":[[["Object"]]]},{"name":"commands.help","description":"Whether to register the built-in help command\r(requires \"util\" group and \"string\" type)","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"commands.prefix","description":"Whether to register the built-in prefix command\r(requires \"util\" group and \"string\" type)","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"commands.eval","description":"Whether to register the built-in eval command\r(requires \"util\" group and \"string\" type)","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"commands.ping","description":"Whether to register the built-in ping command (requires \"util\" group)","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"commands.unknownCommand","description":"Whether to register the built-in unknown command\r(requires \"util\" group)","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"commands.commandState","description":"Whether to register the built-in command state commands\r(enable, disable, load, unload, reload, list groups - requires \"commands\" group, \"command\" type, and \"group\" type)","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[[["FrameRegistry"]]],"meta":{"line":279,"file":"registry.js","path":"src"}},{"name":"registerDefaultTypes","description":"Registers the default argument types to the registry","params":[{"name":"types","description":"Object specifying which types to register","optional":true,"type":[[["Object"]]]},{"name":"types.string","description":"Whether to register the built-in string type","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"types.integer","description":"Whether to register the built-in integer type","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"types.float","description":"Whether to register the built-in float type","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"types.boolean","description":"Whether to register the built-in boolean type","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"types.user","description":"Whether to register the built-in user type","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"types.member","description":"Whether to register the built-in member type","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"types.role","description":"Whether to register the built-in role type","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"types.channel","description":"Whether to register the built-in channel type","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"types.textChannel","description":"Whether to register the built-in text-channel type","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"types.voiceChannel","description":"Whether to register the built-in voice-channel type","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"types.categoryChannel","description":"Whether to register the built-in category-channel type","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"types.message","description":"Whether to register the built-in message type","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"types.customEmoji","description":"Whether to register the built-in custom-emoji type","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"types.defaultEmoji","description":"Whether to register the built-in default-emoji type","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"types.command","description":"Whether to register the built-in command type","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"types.group","description":"Whether to register the built-in group type","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[[["FrameRegistry"]]],"meta":{"line":325,"file":"registry.js","path":"src"}}],"meta":{"line":12,"file":"registry.js","path":"src"}},{"name":"FrameCommand","description":"Class for creating a new command","construct":{"name":"FrameCommand","description":"Creates the command instance","params":[{"name":"client","description":"The client to bind the command to","type":[[["FrameClient"]]]},{"name":"info","description":"The info about the command","type":[[["CommandInfo"]]]}]},"props":[{"name":"client","description":"The client to be used for this command","readonly":true,"type":[[["FrameClient"]]],"meta":{"line":28,"file":"command.js","path":"src/commands"}},{"name":"info","description":"The command's information","readonly":true,"type":[[["CommandInfo"]]],"meta":{"line":36,"file":"command.js","path":"src/commands"}},{"name":"name","description":"The command name","readonly":true,"type":[[["String"]]],"meta":{"line":49,"file":"command.js","path":"src/commands"}},{"name":"aliases","description":"The command aliases","readonly":true,"type":[[["Array","<"],["String",">"]]],"meta":{"line":57,"file":"command.js","path":"src/commands"}},{"name":"group","description":"The command group","readonly":true,"type":[[["String"]]],"meta":{"line":64,"file":"command.js","path":"src/commands"}},{"name":"memberName","description":"The command memberName (the name that is shown for example in the help menu)","readonly":true,"type":[[["String"]]],"meta":{"line":71,"file":"command.js","path":"src/commands"}},{"name":"description","description":"The command description","readonly":true,"type":[[["String"]]],"meta":{"line":78,"file":"command.js","path":"src/commands"}},{"name":"details","description":"The command details (detailed description displayed in the help menu)","readonly":true,"type":[[["String"]]],"meta":{"line":86,"file":"command.js","path":"src/commands"}},{"name":"examples","description":"The command examples (examples of how to use the command)","readonly":true,"type":[[["Array","<"],["String",">"]]],"meta":{"line":94,"file":"command.js","path":"src/commands"}}],"methods":[{"name":"validateInfo","description":"Validates the provided client and info to check for any errors","params":[{"name":"client","description":"The client that the command was created with","type":[[["FrameClient"]]]},{"name":"info","description":"The info to validate","type":[[["CommandInfo"]]]}],"meta":{"line":102,"file":"command.js","path":"src/commands"}},{"name":"run","description":"Runs the command","abstract":true,"params":[{"name":"message","description":"The message object which was received from discord","type":[[["Message"]]]},{"name":"args","description":"The command's arguments","type":[[["Object"]]]}],"async":true,"meta":{"line":141,"file":"command.js","path":"src/commands"}},{"name":"runSlash","description":"Runs a command from a slash command","abstract":true,"params":[{"name":"interaction","description":"The interaction that was received from discord","type":[[["Interaction"]]]},{"name":"args","description":"The command's arguments","type":[[["Object"]]]}],"async":true,"meta":{"line":151,"file":"command.js","path":"src/commands"}},{"name":"button","description":"Runs when a button is clicked","abstract":true,"params":[{"name":"interaction","description":"The button interaction received from discord","type":[[["Interaction"]]]}],"async":true,"meta":{"line":160,"file":"command.js","path":"src/commands"}}],"meta":{"line":4,"file":"command.js","path":"src/commands"}},{"name":"FrameGroup","description":"Class for storing info about a group as an object","construct":{"name":"FrameGroup","description":"Creates a new group","params":[{"name":"client","description":"The client to be used for this group","type":[[["FrameClient"]]]},{"name":"id","description":"The id of the group (must be lowercase)","type":[[["String"]]]},{"name":"name","description":"The name of the group","type":[[["String"]]]}]},"props":[{"name":"id","description":"The id of the group","readonly":true,"type":[[["String"]]],"meta":{"line":28,"file":"group.js","path":"src/commands"}},{"name":"name","description":"The name of the group","readonly":true,"type":[[["String"]]],"meta":{"line":35,"file":"group.js","path":"src/commands"}}],"meta":{"line":4,"file":"group.js","path":"src/commands"}},{"name":"SQLiteProvider","description":"Sets up a SQLite database to sotre guild settings","construct":{"name":"SQLiteProvider","params":[{"name":"db","description":"The SQLite database to use for storing settings","type":[[["SQLiteDatabase"]]]}]},"props":[{"name":"db","description":"The database to be used for storing settings","type":[[["SQLiteDatabase"]]],"meta":{"line":24,"file":"sqlite.js","path":"src/providers"}},{"name":"client","description":"The client that the provider is for (set automaticallyafter using {@link FrameClient#setProvider})","readonly":true,"type":[[["FrameClient"]]],"meta":{"line":26,"file":"sqlite.js","path":"src/providers"}},{"name":"settings","description":"Guild and global settings, cached for faster loading","access":"private","type":[[["Map"]]],"meta":{"line":39,"file":"sqlite.js","path":"src/providers"}},{"name":"insertOrReplaceStmt","description":"Prepared statement to insert or replace a settings row","access":"private","type":[[["SQLiteStatement"]]],"meta":{"line":46,"file":"sqlite.js","path":"src/providers"}},{"name":"deleteStmt","description":"Prepared statement to delete an entire settings row","access":"private","type":[[["SQLiteStatement"]]],"meta":{"line":53,"file":"sqlite.js","path":"src/providers"}}],"methods":[{"name":"init","description":"Initialises and prepares the database","params":[{"name":"client","description":"The client to use for the provider","type":[[["FrameClient"]]]}],"async":true,"meta":{"line":60,"file":"sqlite.js","path":"src/providers"}},{"name":"destroy","description":"Finishes up all current operations with the database and closes the connection","async":true,"meta":{"line":87,"file":"sqlite.js","path":"src/providers"}},{"name":"get","description":"Gets a guild's or global setting from cached memory","params":[{"name":"guild","description":"The guild to get the settings for (or 'global')","type":[["*"]]},{"name":"key","description":"The key to the setting","type":[[["String"]]]},{"name":"defVal","description":"The default value to return if nothing is found","type":[["*"]]}],"returns":{"types":[["*"]],"description":"- The value of the setting"},"meta":{"line":101,"file":"sqlite.js","path":"src/providers"}},{"name":"set","description":"Sets or changes a setting of a guild or global","params":[{"name":"guild","description":"The guild to set the settings for (or 'global')","type":[["*"]]},{"name":"key","description":"The key to the setting","type":[[["String"]]]},{"name":"val","description":"The value to set","type":[["*"]]}],"async":true,"returns":{"types":[["*"]],"description":"- The value of the setting after changing"},"meta":{"line":113,"file":"sqlite.js","path":"src/providers"}},{"name":"remove","description":"Completely removes a setting from cache and database","params":[{"name":"guild","description":"The guild to delete the setting from","type":[["*"]]},{"name":"key","description":"The key to the setting","type":[[["String"]]]}],"async":true,"returns":{"types":[["*"]],"description":"- The value of the setting before it was deleted"},"meta":{"line":133,"file":"sqlite.js","path":"src/providers"}},{"name":"clear","description":"Clears all the setting for a guild","params":[{"name":"guild","description":"The guild to delete all data from","type":[["*"]]}],"async":true,"meta":{"line":149,"file":"sqlite.js","path":"src/providers"}},{"name":"updateOtherShards","description":"Changes a global setting on all shards","params":[{"name":"key","description":"The key to the setting","type":[["*"]]},{"name":"val","description":"The value to set","type":[["*"]]}],"meta":{"line":161,"file":"sqlite.js","path":"src/providers"}},{"name":"getGuildID","description":"Gets the ID of a guild","scope":"static","params":[{"name":"guild","description":"The guild to get the ID of","type":[[["String"]],[["Guild"]]]}],"returns":{"types":[[["String"]]],"description":"- The ID of the guild"},"meta":{"line":184,"file":"sqlite.js","path":"src/providers"}}],"meta":{"line":14,"file":"sqlite.js","path":"src/providers"}},{"name":"ArgumentType","description":"A type for command arguments","construct":{"name":"ArgumentType","params":[{"name":"client","description":"The client the argument type is for","type":[[["CommandoClient"]]]},{"name":"id","description":"The argument type ID (this is what you specify in {@link ArgumentInfo#type})","type":[[["string"]]]}]},"props":[{"name":"client","description":"Client that this argument type is for","readonly":true,"type":[[["CommandoClient"]]],"meta":{"line":12,"file":"base.js","path":"src/types"}},{"name":"id","description":"ID of this argument type (this is what you specify in {@link ArgumentInfo#type})","type":[[["string"]]],"meta":{"line":24,"file":"base.js","path":"src/types"}}],"methods":[{"name":"validate","description":"Validates a value string against the type","abstract":true,"params":[{"name":"val","description":"Value to validate","type":[[["string"]]]},{"name":"originalMsg","description":"Message that triggered the command","type":[[["CommandoMessage"]]]},{"name":"arg","description":"Argument the value was obtained from","type":[[["Argument"]]]},{"name":"currentMsg","description":"Current response message","optional":true,"default":"originalMsg","nullable":true,"type":[[["CommandoMessage"]]]}],"returns":{"types":[[["boolean"]],[["string"]],[["Promise","<("],["boolean","|"],["string",")>"]]],"description":"Whether the value is valid, or an error message"},"meta":{"line":37,"file":"base.js","path":"src/types"}},{"name":"parse","description":"Parses the raw value string into a usable value","abstract":true,"params":[{"name":"val","description":"Value to parse","type":[[["string"]]]},{"name":"originalMsg","description":"Message that triggered the command","type":[[["CommandoMessage"]]]},{"name":"arg","description":"Argument the value was obtained from","type":[[["Argument"]]]},{"name":"currentMsg","description":"Current response message","optional":true,"default":"originalMsg","nullable":true,"type":[[["CommandoMessage"]]]}],"returns":{"types":[["*"],[["Promise","<"],["*",">"]]],"description":"Usable value"},"meta":{"line":51,"file":"base.js","path":"src/types"}},{"name":"isEmpty","description":"Checks whether a value is considered to be empty. This determines whether the default value for an argument\nshould be used and changes the response to the user under certain circumstances.","params":[{"name":"val","description":"Value to check for emptiness","type":[[["string"]]]},{"name":"originalMsg","description":"Message that triggered the command","type":[[["CommandoMessage"]]]},{"name":"arg","description":"Argument the value was obtained from","type":[[["Argument"]]]},{"name":"currentMsg","description":"Current response message","optional":true,"default":"originalMsg","nullable":true,"type":[[["CommandoMessage"]]]}],"returns":{"types":[[["boolean"]]],"description":"Whether the value is empty"},"meta":{"line":64,"file":"base.js","path":"src/types"}}],"meta":{"line":2,"file":"base.js","path":"src/types"}},{"name":"ArgumentUnionType","description":"A type for command arguments that handles multiple other types","extends":[[["ArgumentType"]]],"props":[{"name":"types","description":"Types to handle, in order of priority","type":[[["Array","<"],["ArgumentType",">"]]],"meta":{"line":15,"file":"union.js","path":"src/types"}},{"name":"client","description":"Client that this argument type is for","readonly":true,"type":[[["CommandoClient"]]],"meta":{"line":12,"file":"base.js","path":"src/types"}},{"name":"id","description":"ID of this argument type (this is what you specify in {@link ArgumentInfo#type})","type":[[["string"]]],"meta":{"line":24,"file":"base.js","path":"src/types"}}],"methods":[{"name":"validate","description":"Validates a value string against the type","inherits":"ArgumentType#validate","inherited":true,"abstract":false,"params":[{"name":"val","description":"Value to validate","type":[[["string"]]]},{"name":"originalMsg","description":"Message that triggered the command","type":[[["CommandoMessage"]]]},{"name":"arg","description":"Argument the value was obtained from","type":[[["Argument"]]]},{"name":"currentMsg","description":"Current response message","optional":true,"default":"originalMsg","nullable":true,"type":[[["CommandoMessage"]]]}],"returns":{"types":[[["boolean"]],[["string"]],[["Promise","<("],["boolean","|"],["string",")>"]]],"description":"Whether the value is valid, or an error message"},"meta":{"line":37,"file":"base.js","path":"src/types"}},{"name":"parse","description":"Parses the raw value string into a usable value","inherits":"ArgumentType#parse","inherited":true,"abstract":false,"params":[{"name":"val","description":"Value to parse","type":[[["string"]]]},{"name":"originalMsg","description":"Message that triggered the command","type":[[["CommandoMessage"]]]},{"name":"arg","description":"Argument the value was obtained from","type":[[["Argument"]]]},{"name":"currentMsg","description":"Current response message","optional":true,"default":"originalMsg","nullable":true,"type":[[["CommandoMessage"]]]}],"returns":{"types":[["*"],[["Promise","<"],["*",">"]]],"description":"Usable value"},"meta":{"line":51,"file":"base.js","path":"src/types"}},{"name":"isEmpty","description":"Checks whether a value is considered to be empty. This determines whether the default value for an argument\nshould be used and changes the response to the user under certain circumstances.","inherits":"ArgumentType#isEmpty","inherited":true,"params":[{"name":"val","description":"Value to check for emptiness","type":[[["string"]]]},{"name":"originalMsg","description":"Message that triggered the command","type":[[["CommandoMessage"]]]},{"name":"arg","description":"Argument the value was obtained from","type":[[["Argument"]]]},{"name":"currentMsg","description":"Current response message","optional":true,"default":"originalMsg","nullable":true,"type":[[["CommandoMessage"]]]}],"returns":{"types":[[["boolean"]]],"description":"Whether the value is empty"},"meta":{"line":64,"file":"base.js","path":"src/types"}}],"meta":{"line":7,"file":"union.js","path":"src/types"}}],"interfaces":[],"typedefs":[{"name":"FrameClientOptions","description":"Options for the new FrameClient","type":[[["Object"]]],"props":[{"name":"commandPrefix","description":"Default prefix for the commands","optional":true,"default":"!","type":[[["string"]]]},{"name":"owners","description":"An array of the bot's owners","type":[[["Array","<"],["String",">"]]]}],"meta":{"line":11,"file":"client.js","path":"src"}},{"name":"CommandInfo","description":"The information about the command","type":[[["Object"]]],"props":[{"name":"name","description":"The name of the command (only lower-case)","type":[[["String"]]]},{"name":"aliases","description":"The aliases for the command","optional":true,"default":"[]","type":[[["Array","<"],["String",">"]]]},{"name":"group","description":"The group for the command","type":[[["String"]]]},{"name":"memberName","description":"The display name of the command (can include special characters)","type":[[["String"]]]},{"name":"description","description":"The description of the command","type":[[["String"]]]},{"name":"details","description":"A detailed description of the command","optional":true,"default":"\"\"","type":[[["String"]]]},{"name":"examples","description":"A list of examples for the command","optional":true,"default":"[]","type":[[["Array","<"],["String",">"]]]},{"name":"clientPermissions","description":"A list of permissions that the client has to have","optional":true,"default":"[]","type":[[["Array","<"],["String",">"]]]},{"name":"userPermissions","description":"A list of permissions that the user has to have","optional":true,"default":"[]","type":[[["Array","<"],["String",">"]]]},{"name":"ownerOnly","description":"Whether the command should be restricted to the bot owner","optional":true,"default":false,"type":[[["Boolean"]]]}],"meta":{"line":5,"file":"command.js","path":"src/commands"}}],"externals":[{"name":"SQLiteStatement","see":["{@link https://www.npmjs.com/package/sqlite}"],"meta":{"line":1,"file":"sqlite.js","path":"src/providers"}},{"name":"SQLiteDatabase","see":["{@link https://www.npmjs.com/package/sqlite}"],"meta":{"line":6,"file":"sqlite.js","path":"src/providers"}}]}